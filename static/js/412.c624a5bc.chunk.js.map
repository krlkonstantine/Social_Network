{"version":3,"file":"static/js/412.c624a5bc.chunk.js","mappings":"gLACA,EAA8B,8B,kBCA9B,EAA+B,6BAA/B,EAA0E,4BAA1E,EAA+G,uBAA/G,EAAgJ,wBAAhJ,EAAsL,4B,gDCkBhLA,GAAeC,EAAAA,EAAAA,GAAY,KAe3BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAChDC,KAAM,wBADkBD,EAbsC,SAACE,GAC/D,OAAO,kBAAMC,UAAWC,EAAeC,SAAUH,EAAMI,aAAhD,WACK,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUd,GACrBe,KAAK,iBACLC,YAAa,6BAGhC,2C,2CCrBFC,EAAkB,SAACC,GACvB,MAAO,CACHC,OAAQD,EAAME,KAAKD,S,ICYZE,GAAkBC,E,QAAAA,KAC3BC,EAAAA,EAAAA,KAfoB,SAACL,GACrB,MAAO,CACHM,SAAUN,EAAMO,YAAYC,QAAQF,aAIjB,SAACG,GACxB,MAAO,CACHC,mBAAoB,SAACC,GACjBF,GAASG,EAAAA,EAAAA,GAAwBD,UDHtC,SAA8BE,GAajC,OAFmCR,EAAAA,EAAAA,IAAQN,EAARM,EATT,SAAClB,GACvB,IAAOc,EAAwBd,EAAxBc,OAAWa,GAAlB,OAA+B3B,EAA/B,GAEA,OAAKc,GAEE,SAACY,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUC,GAAG,gBCGVX,EFeT,SAACjB,GAMnB,OACI,iBAAKC,UAAWC,EAAhB,UACKF,EAAMmB,SAASU,KAAI,SAAAC,GAChB,OACI,iBAAkB7B,UAAWC,EAA7B,WACI,gBAAK6B,IAAI,SACJC,IAAK,2FACL/B,UAAWC,KAChB,gBAAKD,UAAWC,EAAhB,SAA4B4B,EAAGG,YAJzBH,EAAGI,SASrB,SAACrC,EAAD,CAAqBM,SAjBP,SAACgC,GACnBnC,EAAMuB,mBAAmBY,EAAOC,yBGxCxC,EAAwB,2BAAxB,EAA0D,0BCW7CC,GAAuBnB,EAAAA,EAAAA,KANZ,SAACL,GACrB,MAAO,CACHyB,cAAezB,EAAMO,YAAYC,QAAQiB,iBAIbpB,ECFT,SAAClB,GACxB,OACI,4BACI,eAAIC,UAAWC,EAAf,sBACA,eAAID,UAAWC,EAAf,SACKF,EAAMsC,cAAcT,KAAI,SAAAC,GACrB,OAAO,wBAAkBA,EAAGpB,MAAZoB,EAAGI,gBCFvC,MATA,WACI,OACI,iBAAKjC,UAAWC,EAAhB,WACI,SAACmC,EAAD,KACA,SAACrB,EAAD","sources":["webpack://social-newtwork/./src/components/main/Messages/Messages.module.css?e595","webpack://social-newtwork/./src/components/main/Messages/Dialog.module.css?e723","components/main/Messages/Dialog.tsx","hoc/withAuthRedirect.tsx","components/main/Messages/DialogContainer.tsx","webpack://social-newtwork/./src/components/main/Messages/DialogsList.module.css?b93c","components/main/Messages/DialogListContainer.tsx","components/main/Messages/DialogsList.tsx","components/main/Messages/Messages.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsList\":\"Messages_dialogsList__2k9b3\"};","// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"Dialog_messageBlock__YtEzH\",\"messageItem\":\"Dialog_messageItem__X+CfW\",\"avatar\":\"Dialog_avatar__Nn1J7\",\"message\":\"Dialog_message__E-pZQ\",\"sendMessage\":\"Dialog_sendMessage__sm1z4\"};","import React from 'react';\r\nimport s from './Dialog.module.css'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthTC, required} from \"../../../utils/validators/validaqtors\";\r\n\r\n\r\nexport type DialogPropsType = {\r\n    messages: {\r\n        _id: string\r\n        message: string\r\n    }[]\r\n    onClickSendMessage: (textNewMessage: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength100 = maxLengthTC(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <form className={s.sendMessage} onSubmit={props.handleSubmit}>\r\n                <pre>\r\n                    <Field component={Textarea}\r\n                           validate={[required, maxLength100]}\r\n                           name='newMessageText'\r\n                           placeholder={'Write your message...'}\r\n                    />\r\n                </pre>\r\n        <button>Send</button>\r\n    </form>\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport const Dialog = (props: DialogPropsType) => {\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.onClickSendMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.messageBlock}>\r\n            {props.messages.map(el => {\r\n                return (\r\n                    <div key={el._id} className={s.messageItem}>\r\n                        <img alt='avatar'\r\n                             src={'https://icons.iconarchive.com/icons/iconarchive/incognito-animal-2/128/Cat-Cool-icon.png'}\r\n                             className={s.avatar}/>\r\n                        <div className={s.message}>{el.message}</div>\r\n\r\n                    </div>\r\n                )\r\n            })}\r\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/redux-store\";\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n  return {\n      isAuth: state.auth.isAuth\n  }\n}\n\nexport function withAuthRedirect<T> (Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStateToPropsType) => {\n        const {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to='/login'/>;\n\n        return <Component {...restProps as T}/>\n\n    }\n\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n\n    return ConnectedRedirectComponent\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {ActionType} from \"../../../redux/store\";\r\nimport {addMessageActionCreator} from \"../../../redux/reducers/dialogs-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dialog} from \"./Dialog\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        messages: state.dialogsPage.dialogs.messages,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: (action: ActionType) => void) => {\r\n    return {\r\n        onClickSendMessage: (textNewMessage: string) => {\r\n            dispatch(addMessageActionCreator(textNewMessage))\r\n        },\r\n    }\r\n}\r\n\r\nexport const DialogContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialog)","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"DialogsList_title__B1cVk\",\"list\":\"DialogsList_list__gzZrk\"};","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {DialogsList} from \"./DialogsList\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPerson: state.dialogsPage.dialogs.dialogsPerson\r\n    }\r\n}\r\n\r\nexport const DialogsListContainer = connect(mapStateToProps)(DialogsList)","import React from 'react';\r\nimport s from './DialogsList.module.css'\r\n\r\ntype DialogsListPropsType = {\r\n    dialogsPerson: {\r\n        _id: string\r\n        name: string\r\n    }[]\r\n}\r\n\r\nexport const DialogsList = (props: DialogsListPropsType) => {\r\n    return (\r\n        <div>\r\n            <h3 className={s.title}>dialogs</h3>\r\n            <ul className={s.list}>\r\n                {props.dialogsPerson.map(el => {\r\n                    return <li key={el._id}>{el.name}</li>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Messages.module.css'\r\nimport {DialogContainer} from \"./DialogContainer\";\r\nimport {DialogsListContainer} from \"./DialogListContainer\";\r\n\r\nfunction Messages() {\r\n    return (\r\n        <div className={s.dialogsList}>\r\n            <DialogsListContainer/>\r\n            <DialogContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages"],"names":["maxLength100","maxLengthTC","AddMessageReduxForm","reduxForm","form","props","className","s","onSubmit","handleSubmit","Field","component","Textarea","validate","required","name","placeholder","mapStateToProps","state","isAuth","auth","DialogContainer","compose","connect","messages","dialogsPage","dialogs","dispatch","onClickSendMessage","textNewMessage","addMessageActionCreator","Component","restProps","to","map","el","alt","src","message","_id","values","newMessageText","DialogsListContainer","dialogsPerson"],"sourceRoot":""}